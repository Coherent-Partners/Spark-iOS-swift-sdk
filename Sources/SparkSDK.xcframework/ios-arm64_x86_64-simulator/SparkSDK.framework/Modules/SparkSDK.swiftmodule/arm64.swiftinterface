// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SparkSDK
import Combine
import Foundation
@_exported import SparkSDK
import Swift
import WebKit
import _Concurrency
@objc @_hasMissingDesignatedInitializers public class SparkiOSSDK : ObjectiveC.NSObject {
  @Combine.Published @_projectedValueProperty($executionResponses) public var executionResponses: Swift.Result<SparkSDK.ExecutionResponse, Swift.Error> {
    get
  }
  public var $executionResponses: Combine.Published<Swift.Result<SparkSDK.ExecutionResponse, Swift.Error>>.Publisher {
    get
  }
  public func execute(requestId: Swift.String, input: [Swift.String : Any])
  @objc deinit
}
extension SparkSDK.SparkiOSSDK : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public struct JSMessage {
  public let name: Swift.String
  public let body: Any
}
public struct WasmSuccess : Swift.Equatable {
  public static func == (a: SparkSDK.WasmSuccess, b: SparkSDK.WasmSuccess) -> Swift.Bool
}
public struct ExecutionResponse {
  public let error: Swift.String
  public let requestId: Swift.String
  public let success: Swift.Bool
  public let result: Any
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SparkSDKFactory : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  public func requestSDK(modelsPath: Swift.String, enableLogging: Swift.Bool = false, onSDKReady: @escaping (Swift.Result<SparkSDK.SparkiOSSDK, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension SparkSDK.SparkSDKFactory : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
